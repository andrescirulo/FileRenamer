<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AgregarAlFinalDelNombre_Nombre" xml:space="preserve">
    <value>Add at the end of the filename</value>
  </data>
  <data name="AgregarAlFinalDelNombre_ToString" xml:space="preserve">
    <value>Add "{1}" at the end of the filename</value>
  </data>
  <data name="AgregarAlFinalDeTodo_Nombre" xml:space="preserve">
    <value>Add at the end of the filename (after the extension)</value>
  </data>
  <data name="AgregarAlFinalDeTodo_ToString" xml:space="preserve">
    <value>Add "{1}" after the extension of the filename</value>
  </data>
  <data name="AgregarAlPrincipio_Nombre" xml:space="preserve">
    <value>Add at the begining of the filename</value>
  </data>
  <data name="AgregarAlPrincipio_ToString" xml:space="preserve">
    <value>Add "{1}" at the begining of the filename</value>
  </data>
  <data name="AgregarPadding_Cantidad" xml:space="preserve">
    <value>Repetitions.:</value>
  </data>
  <data name="AgregarPadding_Caracter" xml:space="preserve">
    <value>Character:</value>
  </data>
  <data name="AgregarPadding_Nombre" xml:space="preserve">
    <value>Add padding</value>
  </data>
  <data name="AgregarPadding_ToString" xml:space="preserve">
    <value>Add "{1}" until reaching {2} characters</value>
  </data>
  <data name="EliminarEntreCaracteres_Nombre" xml:space="preserve">
    <value>Remove between characters (without including the extension)</value>
  </data>
  <data name="EliminarEntreCaracteres_ToString" xml:space="preserve">
    <value>Remove text between "{1}" and "{2}"</value>
  </data>
  <data name="Operacion_Entre" xml:space="preserve">
    <value>Between</value>
  </data>
  <data name="Operacion_Y" xml:space="preserve">
    <value>and</value>
  </data>
  <data name="ReemplazoEnNombre_Nombre" xml:space="preserve">
    <value>Replace (without including the extension)</value>
  </data>
  <data name="ReemplazoEnNombre_ToString" xml:space="preserve">
    <value>Replace "{1}" for "{2}" (without including the extension)</value>
  </data>
  <data name="Reemplazo_Nombre" xml:space="preserve">
    <value>Replace (including the extension)</value>
  </data>
  <data name="Reemplazo_ToString" xml:space="preserve">
    <value>Replace "{1}" for "{2}" (including the extension)</value>
  </data>
  <data name="SoloEntreCaracteres_Nombre" xml:space="preserve">
    <value>Only between characters (without including the extension)</value>
  </data>
  <data name="SoloEntreCaracteres_ToString" xml:space="preserve">
    <value>Only text between "{1}" and "{2}"</value>
  </data>
  <data name="MayusculasYMinusculas_Nombre" xml:space="preserve">
    <value>Uppercase and LowerCase</value>
  </data>
  <data name="MayusculasYMinusculas_ToString" xml:space="preserve">
    <value>Convert Uppercase and Lowercase</value>
  </data>
  <data name="TodoAMayusculas_Nombre" xml:space="preserve">
    <value>Convert filename to Uppercase</value>
  </data>
  <data name="TodoAMayusculas_ToString" xml:space="preserve">
    <value>Convert filename to Uppercase</value>
  </data>
  <data name="TodoAMinusculas_Nombre" xml:space="preserve">
    <value>Convert filename to Lowercase</value>
  </data>
  <data name="TodoAMinusculas_ToString" xml:space="preserve">
    <value>Convert filename to Lowercase</value>
  </data>
  <data name="AgregarAlFinalDelNombre_Descripcion" xml:space="preserve">
    <value>Adds the specified text at the end of the filename, before the extension</value>
  </data>
  <data name="AgregarAlFinalDeTodo_Descripcion" xml:space="preserve">
    <value>Adds the specified text at the end of the filename, after the extension</value>
  </data>
  <data name="AgregarAlPrincipio_Descripcion" xml:space="preserve">
    <value>Adds the specified text at the begining of the filename</value>
  </data>
  <data name="AgregarPadding_Descripcion" xml:space="preserve">
    <value>Adds the specified character at the begining of the filename until it's length is the specified</value>
  </data>
  <data name="EliminarEntreCaracteres_Descripcion" xml:space="preserve">
    <value>Removes the text between the specified characters, including the boundary characters</value>
  </data>
  <data name="MayusculasYMinusculas_Descripcion" xml:space="preserve">
    <value>Converts the text to lowercase and uppercase separating by word</value>
  </data>
  <data name="ReemplazoEnNombre_Descripcion" xml:space="preserve">
    <value>Replace one text for another in the filename, without including the extension</value>
  </data>
  <data name="Reemplazo_Descripcion" xml:space="preserve">
    <value>Replace one text for another in the filename, including the extension</value>
  </data>
  <data name="SoloEntreCaracteres_Descripcion" xml:space="preserve">
    <value>Keeps only the text between the specified characters without including the boundary characters</value>
  </data>
  <data name="TodoAMayusculas_Descripcion" xml:space="preserve">
    <value>Converts all the filename to Uppercase</value>
  </data>
  <data name="TodoAMinusculas_Descripcion" xml:space="preserve">
    <value>Converts all the filename to Lowercase</value>
  </data>
</root>